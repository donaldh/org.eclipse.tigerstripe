--- Q7 testcase ---
Q7-vendor: www.xored.com/q7
Format-Version: 1.0
Element-Name: UpdateLiteralValue
Tags: TS_Project/Edit/Artifacts/Enumeration/constant
External-Reference: http://docs.xored.com/display/TS/UpdateLiteralValue
Element-Version: 3.0
Contexts: _3uHT4H-DEeCcSOu_oe8o1g
Save-Time: 1/18/12 1:28 PM
Id: _xmZTMIKuEeCVyu1SjxvhoQ

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Entry-Name: .description
Content-Type: text/plain

Check update of literal values 

Precondition:
SeveralEnumerationsContextGroup

Steps:
1. Create literal of 'int' type and check default values = 0
2. Save changes.
3. Update literal value to -12.5
4. Check warning message in Problems view
5. Update literal value to -12
6. Check empty Problems view
7. Update literal value to test and then empty value
8. Check warning message in Problems view
9. Create literal of 'String' type and check default values = "0"
10. Save changes.
11. Update literal value to test
12. Check warning message in Problems view
13. Update literal value to -12
14. Check empty Problems view
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Entry-Name: .content
Content-Type: text/ecl

get-view "Tigerstripe Explorer" | get-tree | select "Project1/src/com.mycompany/Enumeration1" | double-click -nowait
get-editor Enumeration1 | get-section Constants | get-section | get-button Add | click
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | get-property value | equals 0 | verify-true
get-button "Save \(.*\)" | click
with [get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"]] {
    key-type "M1+a"
    set-text "-12.5"
}
get-button "Save \(.*\)" | click
get-view Problems | get-tree | get-item "Errors \\(1 item\\)" | get-property caption | equals "Errors (1 item)" | verify-true
get-view Problems | get-tree | get-item "Errors \\(1 item\\)/Type mismatch: cannot convert from double to int" | get-property caption | equals "Type mismatch: cannot convert from double to int" | verify-true
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | set-text "-12"
get-button "Save \(.*\)" | click
with [get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"]] {
    key-type "M1+a"
    set-text test
}
get-button "Save \(.*\)" | click
get-view Problems | get-tree | get-item "Errors \\(1 item\\)" | get-property caption | equals "Errors (1 item)" | verify-true
get-view Problems | get-tree | get-item "Errors \\(1 item\\)/test cannot be resolved to a variable" | get-property caption | equals "test cannot be resolved to a variable" | verify-true
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | set-text 1
get-button "Save \(.*\)" | click
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | set-text ""
get-button "Save \(.*\)" | click
get-view Problems | get-tree | get-item "Errors \\(1 item\\)/Syntax error on token \"=\", VariableInitializer expected after this token" | get-property columns -index 0 | equals "Syntax error on token \"=\", VariableInitializer expected after this token" | verify-true
with [get-editor Enumeration1 | get-section Constants | get-section] {
    get-table | select "literal0="
    get-button Remove | click
}
get-window "Remove Constant" | get-button Yes | click
get-button "Save \(.*\)" | click
get-window "Save Enumeration" | get-button Yes | click
with [get-editor Enumeration1] {
    get-tab-folder | get-tab-item Details | click
    get-section "Implementation Specifics" | get-combo -after [get-label "Base Type:"] | set-text String
}
get-button "Save \(.*\)" | click
with [get-editor Enumeration1] {
    get-tab-folder | get-tab-item Overview | click
    get-section Constants | get-section | get-button Add | click
}
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | get-property value | equals "\"0\"" | verify-true

get-button "Save \(.*\)" | click
with [get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"]] {
    key-type "M1+a"
    set-text test
}
get-button "Save \(.*\)" | click
get-view Problems | get-tree | get-item "Errors \\(1 item\\)" | get-property caption | equals "Errors (1 item)" | verify-true
get-view Problems | get-tree | get-item "Errors \\(1 item\\)/test cannot be resolved to a variable" | get-property caption | equals "test cannot be resolved to a variable" | verify-true
get-editor Enumeration1 | get-section Constants | get-section -index 1 | get-editbox -after [get-label "Value:"] | set-text "\"test\""
get-button "Save \(.*\)" | click
with [get-editor Enumeration1 | get-section Constants | get-section | get-table | get-item "literal0=\"test\""] {
    get-property columns -index 0 | equals "literal0=\"test\"" | verify-true
    get-property columns -index 1 | equals "\"test\"" | verify-true
}
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
------=_.q7.content-3d2e0690-ce48-3609-83e0-c704d49f1eaf
Content-Type: q7/binary
Entry-Name: .q7.content

UEsDBBQACAAIAAAAIQAAAAAAAAAAAAAAAAAIAAAALmNvbnRlbnR9kVtrAjEQhd8L/Q8h725qLSiLq5RW
UFrpZbdS+rKEZFwjm2TNRdd/37HoPknfwpyZb86cjKetrskenFfWZLSf3FECRlipTJXRGNa9EZ1Obm/G
wuqktQ5kshsmXoDhTtk0Pz9Iq1XaUe5PFOQan2I9o5sQmpSxw+GQWF0l1lXse7m4tFwld0Oosj+V7Ybs
oiYgsESJ4Roy+tVIHuBVBXC8XvE6otJ5GZy8KJnRstU/xXLxEmfwtDrGfr5t9xv7QUnglc9okZfvzm5B
BDaTKrBHF9Sai+DZzESN5IA4dGN84Cbg1LHB1SBqzKvFzYbXn7AGh+FBZ15a4c+3ne6Qyjc1P7IiZ1c8
Y8qEYM4mINBPykGcFw/z3jP6FflbLC2MbL8as64Df4X9/y3Y8gtQSwcI/m+mZywBAADhAQAAUEsBAhQA
FAAIAAgAAAAhAP5vpmcsAQAA4QEAAAgAAAAAAAAAAAAAAAAAAAAAAC5jb250ZW50UEsFBgAAAAABAAEA
NgAAAGIBAAAAAA==
------=_.q7.content-3d2e0690-ce48-3609-83e0-c704d49f1eaf--
------=_.content.raw-c2dfba28-ebef-3afe-bd39-76376d333cc9
Content-Type: q7/binary
Entry-Name: .content.raw

UEsDBBQACAAIAAAAIQAAAAAAAAAAAAAAAAAIAAAALmNvbnRlbnTtXftv20iS/v2A/R94WmAxwW4s8U16
xtnLOJlDDjO3g7GR2cXOwqAlOuZGInUU7Tjz1193kyKbEosPsdl8qH9JLImP7upHffVVddV3f33ZrKVn
N9x5gX81ky8WM8n1l8HK8z9dzZ6ih9fW7K9v/vAf3y2DzcVLELqri8jdrZ2LJfr7YhsGUbAM1heh8+Xy
Fn9/s3R9J/QC6WXjXaaPVfBj0Yv83SX6/mr2GEXby/n8y5cvF8Hm00UQfpr//acP6SW7/CVfVHKFsljI
6LIfb5aP7sZ57fm7yPGX7v6u0gamz5ujy+bksjm5bI4vm6f9cPHHWk/EXa751Dm6tMaTn7yK5z15+aeQ
DzlJucu1t925RFzu5gGLTJm/J/egMZQkPIobx1/tJCTjy+jrFt1e2svLG3ftLqPr+Lb4IegxKydypM+e
v7qavY9f+Sv6EHyZSZundeRt197Si76i6TSbx++d71/cVTM+ei56+9aJIjdEE+7W+4TmXhR6W1d6/7Jd
o4eFx41LnoOetHVC148k77BDljIr7ufK3S3R0yMyvem3vZaSK6Wf1070EISbRAZYCrjBnARyG7puzR5j
2anqjJZkN02O4lYjmaUtRl9s9u3ATc7aQTqQtgON7OObn8Pg3+h++bs5+Uj/tAuXBd/iBm2+on+3jv+1
4Pf3/tPGDR3cIvqhrbv6Lni6X7vXSO6fm/W0+3nxfuVFQUgtFVoG57VE0MaAfnHQSFHiuA6IXol2dWVB
5KkvZnn59t6heo1Pb5CVbBizp/TSi++fogjtENmQvF2tTuiPyqk//422tciJ0hXc+AHwNhFLwpRneckw
2ip+dbzohyCMG79//Q5/Ii8n35upFHN97H4mDwNVsN8s1eab5V7rzZGOI8Aw1WhzujkX/3aenUnurfLQ
9lb0hfuCW918V9KGssv+6Ny7a2psPjrrJ/fyhB7pQ+nRrfsSlbXfeUA9Jc0nfddSlR2LYj6Ynr7d7dwQ
dQUNTejdP0Xohmc8OjOJ/Hc1WxSDStR/NZ1fRBpp68iNt+jdVCOI+Xj5/h1qN/5lJj2G7kNNc/KP8/n7
G9Q6/9O5qYQjdHLjPLvSN9dRuP7zzauTdII+DZ3QPRDSewRCWk9AiDkCmchs44pA1AkhEGso+poZArGH
0qOmCERpikB49TTGA2QLvJophiJraPtbBiv0yTbRX49O6CxRX+IZ6EYO1c9jTGIUYBIWbGIs7gQTvZaV
C51zG6at8fSzNv0PHApIBaLFtqmtN3Iq1zgTldvU56Bz8DlUNPlD5G7Km4zdBGEYhDvpt29kyUPX//Yq
50rId4xQ+3qxE6NbG3HpkJmU7ohJq5NGvyrcZnD3tRQREGEIm3HQe4kp9pLCvcSYzl6CPpFlt/F2Gyda
Pl5KS8f3gwghMP8ZrXrpIQw20or4GKUoQMZAVLUhGUPYkJp2CtyxMm+b2LHGQjvYZ7JvsaQd9OnQDupg
3MusaAeVl4OZOe2gNaQdOPb0yKaHLXqzG1aBP/0/kZ2xezLE6JEMMQQZwsaAsRfTmO7MDRircwOmAKJj
E+Q6ePKjKt8yNiKsYiOiC9T9wee3pQ9kjTGH3PYJgZmjXGksIbc5IchtDAWgMoPc5lB61BRym00hN6+e
svX02Tw8feiaYmqoyyZwNwumsnt3bxaYPZoFpjALGJkF5xIY3dAsyKJUx+/XyLkkso6NwUeaRYAJj8Pw
9xJN7CWFe4kynb0EfcI4cO9EvHel0N0F62d3hZ2HDlrfoYdBc9UupAxhF6rVE3hvMsTeNDZq5lwiwlhS
M/Z0qJkM/PRNZLCiZjR5KD1qSM1kpwtrUjPcesqUmqEUXYfUzHzOvQH8iZmJ7N3dEzNWj8SMJYgZRsaU
CDgtNqamFXD63X/+8/rd29u3/7z56kfOi+Tiu6TARzbIZ9eXZlezv0jfSu7LFrXIXf3rX2+qDKt+Ik6D
9dPG36X6qLgzf/q/pyD69ir+j+5WCumKneDE2LKFsTU2Y2siAVY8jS1DmZCxNbmcG9pYc27oTUNPOfY0
b8mUWFLqVAyZieyL3Rsydo+GjC0MGTaGjLwQkafFlozduSXTMvI0a6GIPB0D4pYXEwle4gq5J3TaS5tc
khltrElm9Kahpxx7mofcMOLWJ4K4J7Mvdg65rUV/kDt7t4DcbSG3iOoshNw6j2z7w3IefEzCmD74XuQ5
a+93pKT2vLsU66zo0dvFt1T7F3SgTsAA/QuNel7DBWEIF8T4DCKRdbO5QWQMzSBqajTogwnzuj2xA/yi
uqpqw+BXZ7lLb/MtIapijTRU6KwXVywruTS3En5xN8HzkGXdPXjvsWBF9m6+4H2/nx9MA2m/9Qmt0WgR
/cOtqytikWTnZQtFdDgY41xWSo/LSulnWXXBwUxkUXU/39Qe51tPdYeOtnEy36gxPuspx2Eft0r38aPR
GOfC0npcWD3VsUCA/YdgvapfhXNAJiBqe0yWpdP6nRs53rru1E77nuXvz8QxshmcyEKfHciG5xTuKzF9
EbXxYbONpUP2I+lm6y69B285Rqbj0FX6vYP0CWYNT3CX6oNJ94l+ug+a+EtTDVTTX8qxq3l/acLNFq1S
0um0XbEIGC2TacPOntI8HmuYvz274TPxxJ2rijH6VDE95fVhU/p2Qkxij/VvrPM+QtiBD2wiB2e5+sAm
lI9SH0zCdFZBgfpgThY1DAo0miY94NbTytq3cVTFIv4PDhnMPIWiDu5Y9IMl9ENj/WBNSD8M5lQjM/0w
mAzMTfVD08qkHHt6nAx4Pp+XFv/UppITeDJbZPeGY49Jga3zPrLJHhjI53JwkyEwMBfTAQbGYMIoWQED
Y6zZ8rJDijWBAceeNqgSkDGkY0cEU9kbu0cEPWajs7s6UZaf8jEngid+BTvSzfSf9hB2FVcMDSExalRN
v9DFYDIfzJ6iWQeC0Fme8JTlaegf5ic8B1/OTxfl/EZmBk8keQBXM1gemhnc2FQcTCTdiWcIjcG4fWud
eE/PsqfHCWd5ODarOJyO+6dmmIynp/TweHoJmszomCL9gCWVHfkRx8zHQwdod3ScRa6f4zTbbbpDPZgK
Kv1+zuYCewjBeXpwVfW5kRqKum/Bept3EwyZMqy7EYdN5YakLgPOs8ex9mVUM0ZX6O72VtK3u2ZMX3tp
9NwTZFdbskvPLeX+1WdDUsqQ6ek4/tRjuYxg+c6NoaisZdAtFlbWCDYAPGLAYf5RbAAKvYGNfwNgVAU2
L5bxVoK1clBTbCijMcvxuAGno3q3YNua5XnMNHqz3JTvJhipbip3I45Wt+kpVtMs59zjUyN11JxmGnuw
Gud9rnP73l7Qw9ODfa/Tm5Gw79vCe7yRAPVORwHvNXo6DDXwJN9KEXwyCoiqYNgDnD7qHc21hahWDtIN
BKI2hnBmbvPqG8Kd2AkrN81GHDBSK0wkRwD2GiqSNv4ImlYXJLBzG/rYaIdGcTS1o2cGJZOkcT852y26
SEp+vJrN5/+1v/DiaHh3x1rAAiIQ054tAz8Kg3Wl8J+8y72KdH087fEL0boJcaKH+yBcueGvXvRIDPTI
i9buYVzjUaBitsjuneXnTyHCIqvrYB2EEnr11UzRFjPpE4IafvL3PRlY/CdlKaInudSt1C/3+EvUrauZ
jo9AoX0An+n44q1IIxcKsgEeXe/TI+qEaVjUIt5LJBmX/EjUH52jibZLQZ8KOHQajEWMoY9HokD0aEtG
knFDfgJXibgVIxW3ZiqZtA25A2krxdLGUFUFPEwNpB2D+mNp40c4nv+T6z/tvyKqJy2MsP82Bdt5bVQ8
DngT2o8D/jsZB/Rnk3GoEj02TffNTL/aa8h9EPKBOtz/vAuXwC9YgmnAMnANjWwP9e38sE3MZshRsoEd
hSd18Oxtg1myh/DgqsxB+v5Woy6r2ZRQbJP9ajQAWWeoUSmNkW4g9Ov40gKp81lmSMAGEXAmX9ukdAtO
Nspcvma1fEvD0EYk30SmqmxTMlU60CBWsUyTeuLF9VGaiXJPz/Y3UxXdJnNVz/YCndoKcs9L/Jxv3q5W
SMbJB8Yyt4tlHpdRB0J4T8ZjAETIw+WqSFtucLntMaCpo2u1VJ2DZ4g6U+fSygsx2VBrQY9Zt8tatfIp
jZ0dkfKpUu6qbHQgYAipUgIu9WaPS8D6gUYy1AU1g60O0JMMwFPihtYWxV7pJlJNXPwF9qKTHPmMnf4S
bynLuOjWHlHpNEjtQMoASMUecbXIP97QJCfO+XLdqhy7trqXtGkciVrXKPCqyB3IGgBSeWxTFQUpsM0w
sI0CELuJKVKcYJ2RKSJFQYB9J0exI8lyRb92Lf69rdGZ1aEA1GxsdgBnL05+GQSXYqAKnn4TvNMpwq4B
nUpdleOCTvyxqVKD2bOnI2D+2FQBUFOMTYEcvwKbNpUyQPYRbGoIbMpS1mqptgUiIU9+GaRtc0C4Kp5V
AOGjJdoLEFYBdU586EDQJDsfehqXyk3KGi71iaSsYp9tIWgyO1A5KqDTie8cCPrsxne+9nx399HbefdY
/mX+9EfXQYvr4NL+nOzgIBFRkcikTL++y3J/zfBxMe93h+5v8Ex/3HvxcdK+1DSjn1D2pl/cXfAULnOH
Z2q+kIT0pS9MH1T2tp+d6DF9k1L/TXgbSd9EHlL2lh+DZVLVOXmTWvtNBv2i9DllL4vjupIXabVfZNMv
Is9gv2gBnIjD1rJKOvkgtoaLNg6lTGVxeERaWj5661XBekuk+ObgBtz1+IejK3n81DGy0uR09E2TAq8d
GLlqLbKv6kyEwDjDwDgaQPYRjGMIjMNIyoARQjCOITCOwDgC47DCOFJZYGllhojuAkA1IAAI45ws/pMl
ZCIHBjbebuNEy8fLfZII9MxnN4ykhzDYSKvgCckWJ4vw/KgARDV9RAkoOtK2JdfOYa1dchfe2yTVKrni
f7CST5QOf5CGq9Jg+stKZ7GCA/u6BGtaLULKFmBtHGCtPIgcPJAonHmnCLva16SeSxR5J848rTqMXJ1K
GHkvzjwNcDPFzjwg/Ylw5jWVMsCHEGeeydmZ95oua9q9tPtw6OmALZ2EJxkiPKmlfAE7JXaYGmwdpjqE
aGggmhVDE/h00PhUByATIROB8kaCTGwsZSiyGZOJQImmIZKJgj4U9OHw6EN2y7SOn8weTH4ModrKj5RD
2U5i6sUU1AtLYQMQn2YGShNxjosZ4E+9GNBhZErApYnBxiVg/tSLAZwPjqkXU1AvbKQMeDcI9WLzp16m
TbwYgN2REC+mIF5ayhega2PixWRLvJiQis2hU5GOYhzo1AT0OWZMshPlgnhpKWVAqWPGJJPy8IkXEcUl
aJizoWFMACOSsCuglJaIVJ9EpLoJRXDkME5VdT6BcQaCcQDzg2AcRWAcRlKGjiZjjKMIjCMwjsA4U49U
NwHPFYFMRheQqVERQwq+1CzlKGLSG8Sky7bSLSyzalFPIknCOGCZBbmSYseoLRyjLIUNpZ3N/HYZETV+
vx1/x6hVnV1Wk6cjYP6OUQsI+CT+zCxvsnCMtpMylFPFfYkoK46PY5TUtuIm7D48oxYAmBPPqCU8o+3k
awPBV7Fn1GLrGbUhHZuDpyK/xTjgqQ0odMIaivwWrKQMaHXCGor8FoI1FKzh8DyjNgASCc1nd0Hz3XxF
6/VFcjG1KQU+6uBn15fiCplJGdG/SN9K7ssWLVV3VUD4paVTix81u5rRDyAFVQX514j807sl/2zAv5RH
VyIhxUjQFXTGhTB2hiLIP4bClhfQGRSKnBKlj1pJuPrgiSZqH7WSMOAuiPk/kZOClZihUFVMAKqcCcD5
fNr0n7wAzN+E/7MF/9dWwICpEhOANlsCUF7UObmLtbEAqWMAqbJckuNWswUHyErMJUluMzEPnwQUtJ+g
/SZM+8lg7eK8ehOZKcai3kpL/BkiKyhbaVfX+NNEjb9WEq5OvKqJIn+tJFxW5U8X2SlYibmkzF9GI3Ii
YXi5s/viYMqrFlsLwcG0FXBZIcVMvow4GLBucR6kigQVIwGpUGlkTJ5kx7AFB9NWzCXFFDMxD5+DEYFY
gpE5H0YGqrqNw6eM/iKxPiYHKD/4XuQ5a+93N0xDqyTnIUIfo0dvF998YrBWo3eIeK6m8Vyqvug2nktW
6jnLdAHUxgHU1NJEt4Yh2ESm0q4OOMpqw42f6+qBTVSrU93qUznRud/0ZZpssbuwM1Qovgj3W8mKEJws
yvjOanaryMwYmEGh5Lgv0y5Fqf/rbNwCbJri63JzhLCqpRZC8YPgNCRrJLfQWS+u+KUfkdXScCpL7pLK
47YVKviIBVbvGfOvU4S0knvgntP7xUVGitsdx6eWxVllgmfE8UGVxGOAlyUg54gVYwFLaCPfRY5ffWyZ
Gfiw5Fg3qlYG93SFzsSidbGPQ+W/k6Wm9LnU2Mh2jzSUqrX1D3fX3cKCCoDHC0thvLCgqq/JqKrCF9JW
wICGiodTZT2cgB8x2SetHvZJMraUmTb9jbI0xYOlndFGmdJ6f0JbZkzJdbTM9LK8D5nMGS0zHbZpfgjW
aBEoNmXXxF+datskd0sOQtDP7s/OJ3T5357d8Jn4sSLnPjFVVGrwt+iq3Zv9VRiP488HP79zI8db74Bf
bwjzn/+R4XBB5Tice3KmmJIexWW3eWHpNqyznh/Q0VWKSZhQQWh5cRCYpFkUHYYWC/tNFiqZFsclWTzi
kr53dq6E3Tz8Y5MoQ9DuODIJqmZ2HWzug3QOk09jnb6GfShUrWNPCFRUK96NGBfOlQ0o5Uq8uRrMN1uj
lBtgXJ5GNsrxlj4pDqgJBfR2teoOcJmlgItxoi0Zqqdy4DoUmWBH4jqESm0krkP+NTKllRdGX7laUT35
Ec3qUwlZ+Nf4sWkPfkSwmAgl4Qkl3+jhVAJU4IOAdkOkhmUl5rJTCZnnls+phDjUbBH/N/ETChYUWZOH
O5aAO+OAO2AdgxjuWALudAZ3wKIDlDKeUJ6mHuBOjUoDWSmY8Uu4B7gDlRqI4Y4i4A4jMUM8GYY7vGuE
nxXcKS0XnhGGIgjhVAGX1Qu3WCfFsutUbcKplgR6HQV6tUvrNpkL7uh10oAVLCqRwSlDxPm3knB15SZj
KnH+/QBWqMhDDFh1AVgZibmkdlN2UoVj7ab5fC4rF/rE4SqUmD6Bq6KGU2sBAx59gk9txvlDFCgBcvw2
xicZlAVg68RvYxzerUD5TA+guCyg+CiguAIlTiW5UdKNR+RGaStmwOIhuVEyx9fgc6Pw0cMiG4rIhtJL
NhQFzGeaV28iP+1Y1BsUmxQzTbJgmphKuzpOyZjQKQX+TJMCZU+lJTyVWDtuGSUUMFkq7rea8R4io8TV
uDNKpMcH09QSGcukavqFPiNnCnllm1BkgJfApyayk9mnJ18j2c3y2dfSnseO4Hz3E+ewFPcYT56D9X6U
Xq1ckGCusvT+erd1vJHHJiFGI/sJpdIHdroAJlBG2wOgqd3RsdMCbA4abCqAkZ/QuDY9loLKPVXIpeSq
SsuYEeUJ5bVNbIjcK8/AjjA1mUK5dgduKAXKSUqjXPNOnCppKeXqM+WGdSdOlrSUctm58vwsFt7rdqKG
0ocS77VCS1qEXLIXfqle1uh9hJFehhLGHUBoPbeFCQg9aAitApof+xENmV7C03FJKnq8XjVzUQyy8OHm
DkQNkV6oT3lRD98t2SMfBo5UEaMlnJTCSclg5Zaxhga9clmWbXiPKyjspG9kstheoV8evfWqYNHt2buD
G8rYQA4/dU0hytnebXab7EeBEnoeAB88E0Tpg5EAHw3gDgnwUWgIK4BPW1FDuRYx8MmJWgAfAXwE8GkL
fKQyj2wCEn5LUMJvrzh6X6FU1QRH5ZhPljgKOzzRJ98PIunexeIN1s/uCglPcqTnpCRVAZyqdZ8oUdWo
RJVMZxzuBqvVI6nwbBO55saC1SD3VOwQzBOOwiHIQuLVripTvhN5V1pKGSqnR0lZuRO5V9pJGUosHzsE
bXrzEA7BlqIGiBLiEFRzlh6/I60T9wNClQziqCV7QUtdBEGdKmTAcomdrTqtCRk5W3UI8+RxLN6+TIFj
x4FjoaIShHPU6EkkOMe2ogagFeEcc6IePucoWEbBMg6PZWS3Vo1a7jUF25siX+5IVB1UHyWhbKwcdyAo
GxYSr846Zpo5tDh6MqEHysaozjxGJrc1ESnzOxNaUuNo7aq5KBtxLnSi50I5nwaFqlxhB6KdMxK6PhHa
9hxoo9OfAznzaVHMb6Mjn/iKAmlvwyAKUK8uQufL5S3+/maJFnroBeie/wdQSwcIuC9AZCoYAADJ6AEA
UEsBAhQAFAAIAAgAAAAhALgvQGQqGAAAyegBAAgAAAAAAAAAAAAAAAAAAAAAAC5jb250ZW50UEsFBgAA
AAABAAEANgAAAGAYAAAAAA==
------=_.content.raw-c2dfba28-ebef-3afe-bd39-76376d333cc9--
