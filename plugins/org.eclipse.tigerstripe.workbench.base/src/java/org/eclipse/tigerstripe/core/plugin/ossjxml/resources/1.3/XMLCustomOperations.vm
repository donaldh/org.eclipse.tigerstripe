#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simple").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simple").Flag == "optional")
#*
  Copyright (c) 2007 Cisco Systems, Inc.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

   Contributors:
      E. Dillon (Cisco Systems, Inc.) - reformat for Code Open-Sourcing
*#
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByValueRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize(${entity.getName()})ByValue Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simple").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($entity.FullyQualifiedName).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"" ).Name"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByValueResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize(${entity.getName()})ByValue Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "single")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByValueException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize(${entity.getName()})ByValue Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("simple").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("simple").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simple").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simpleByKey").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simpleByKey").Flag == "optional")
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByKeyRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize(${entity.getName()})ByKey Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simpleByKey").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.keyInterfaceOf($entity.FullyQualifiedName).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"" ).KeyName"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByKeyResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize(${entity.getName()})ByKey Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "single")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize(${entity.getName()})ByKeyException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize(${entity.getName()})ByKey Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("simpleByKey").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("simpleByKey").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"simpleByKey").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomic").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomic").Flag == "optional")
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomic").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($entity.FullyQualifiedName).Name)s" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).Name"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "plural")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("bulkAtomic").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("bulkAtomic").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomic").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomicByKeys").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomicByKeys").Flag == "optional")
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomicByKeys").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.keyInterfaceOf($entity.FullyQualifiedName).Name)s" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).KeyName"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "plural")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("bulkAtomicByKeys").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("bulkAtomicByKeys").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkAtomicByKeys").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplate").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplate").Flag == "optional")
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplate").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorRequest">
                <sequence>
                    <element name="template" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"" ).Name"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorResponse">
                <sequence>
#set ($returnType = "iterator")
#parse("$resourceDir/XMLCustomReturns.vm")
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("byTemplate").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("byTemplate").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplate").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplates").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplates").Flag == "optional")
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesRequest">
        <annotation>
            <documentation>
                This is the Request for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplates").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorRequest">
                <sequence>
                    <element name="templates" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).Name"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesResponse">
        <annotation>
            <documentation>
                This is the Response for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorResponse">
                <sequence>
#set ($returnType = "iterator")
#parse("$resourceDir/XMLCustomReturns.vm")
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesException">
        <annotation>
            <documentation>
                This is the Exception for the ${method.Name}$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("byTemplates").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("byTemplates").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplates").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffort").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffort").Flag == "optional")
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesRequest">
        <annotation>
            <documentation>
                This is the Request for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffort").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($entity.FullyQualifiedName).Name)s" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).Name"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesResponse">
        <annotation>
            <documentation>
                This is the Response for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "keyResults")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValuesException">
        <annotation>
            <documentation>
                This is the Exception for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByValues Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("bulkBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("bulkBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffort").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffortByKeys").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffortByKeys").Flag == "optional")
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysRequest">
        <annotation>
            <documentation>
                This is the Request for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffortByKeys").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="$util.unCapitalize($ossjUtil.keyInterfaceOf($entity.FullyQualifiedName).Name)s" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).KeyName"  />
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
            </sequence>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysResponse">
        <annotation>
            <documentation>
                This is the Response for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
            </documentation>
        </annotation>
        <complexType>
            <sequence>
#set ($returnType = "keyResults")
#parse("$resourceDir/XMLCustomReturns.vm")
            </sequence>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeysException">
        <annotation>
            <documentation>
                This is the Exception for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByKeys Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("bulkBestEffortByKeys").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("bulkBestEffortByKeys").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"bulkBestEffortByKeys").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplateBestEffort").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplateBestEffort").Flag == "optional")
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateRequest">
        <annotation>
            <documentation>
                This is the Request for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplateBestEffort").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorRequest">
                <sequence>
                    <element name="template" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"" ).Name"  />
                    <element name="failuresOnly" type="boolean"/>
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateResponse">
        <annotation>
            <documentation>
                This is the Response for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorResponse">
                <sequence>
#set ($returnType = "iterator")
#parse("$resourceDir/XMLCustomReturns.vm")
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplateException">
        <annotation>
            <documentation>
                This is the Exception for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplate Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("byTemplateBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("byTemplateBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplateBestEffort").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
#if( $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplatesBestEffort").Flag == "true" || $entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplatesBestEffort").Flag == "optional")
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesRequest">
        <annotation>
            <documentation>
                This is the Request for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplatesBestEffort").Flag == "optional")
                This operation is OPTIONAL
#else
                This operation is MANDATORY
#end
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorRequest">
                <sequence>
                    <element name="templates" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($entity.FullyQualifiedName),$entity.FullyQualifiedName,"[]" ).Name"  />
                    <element name="failuresOnly" type="boolean"/>
#foreach($field in $method.Arguments)
#set ($fieldRestriction = "false")
#parse ("$resourceDir/XMLFields.vm")
#set ($fieldRestriction = "true")
#end
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesResponse">
        <annotation>
            <documentation>
                This is the Response for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
            </documentation>
        </annotation>
        <complexType>
            <complexContent>
                <extension base="${coNS}:IteratorResponse">
                <sequence>
#set ($returnType = "iterator")
#parse("$resourceDir/XMLCustomReturns.vm")
                </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>
    <element name="try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplatesException">
        <annotation>
            <documentation>
                This is the Exception for the try$util.capitalize($method.Name)$util.capitalize($ossjUtil.pluralisedForm(${entity.getName()}))ByTemplates Operation
                The following exceptions are returned if an error occurs.
            </documentation>
        </annotation>
        <complexType>
            <choice>
#foreach($exception in $entity.getDefaultCustomMethodFlavorDetailsStr("byTemplatesBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#foreach($exception in $entity.getCustomMethodFlavorDetailsStr("byTemplatesBestEffort").Exceptions)
                <element name="$util.unCapitalize($ossjUtil.interfaceOf($exception).Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact($exception),$exception,"").Name"/>
#end
#if($entity.getCustomMethodFlavorDetailsStr($method.MethodId,"byTemplatesBestEffort").Flag == "optional")

                <element name="$util.unCapitalize($ossjUtil.interfaceOf("javax.oss.OssUnsupportedOperationException").Name)" type="$ossjXmlUtil.typeNSOf($schemaUtils.getPrefixForArtifact("javax.oss.OssUnsupportedOperationException"),"javax.oss.OssUnsupportedOperationException","").Name"/>
#end
            </choice>
        </complexType>
    </element>
#end
