/*******************************************************************************
 * Copyright (c) 2007 Cisco Systems, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    E. Dillon (Cisco Systems, Inc.) - reformat for Code Open-Sourcing
 *******************************************************************************/
package org.eclipse.tigerstripe.core.plugin.ossj;

import java.io.File;
import java.util.Properties;

import org.eclipse.tigerstripe.api.external.TigerstripeException;
import org.eclipse.tigerstripe.core.model.AbstractArtifact;
import org.eclipse.tigerstripe.core.model.ArtifactManager;
import org.eclipse.tigerstripe.core.model.Tag;
import org.eclipse.tigerstripe.core.plugin.PluginRef;

/**
 * @author Eric Dillon
 * 
 * Represents any OSS/J Java Interface generated by this Plugin.
 * 
 * It knows how to parse a tag like below:
 * 
 * @tigerstripe.interface generate = "true|false" package = "<package for
 *                        generated interface>" name = "<name of the generated
 *                        interface>"
 */
public class OssjInterfaceModel {

	public final static String TEMPLATE_PREFIX = "org/eclipse/tigerstripe/core/plugin/ossj/resources";
	public final static String INTERFACE_TAG = "tigerstripe.interface";

	private String targetPackage;
	private String targetName;
	private String generate;
	private AbstractArtifact artifact;
	private String destinationDir;
	private String template;

	private String templatePrefix;

	// The reference to the plugin that's in context
	private PluginRef pluginRef;

	/**
	 * Default constructor
	 * 
	 */
	protected OssjInterfaceModel(AbstractArtifact artifact, PluginRef pluginRef)
			throws TigerstripeException {
		this.artifact = artifact;
		this.pluginRef = pluginRef;
		build(artifact.getArtifactManager());
		setTemplatePrefix(TEMPLATE_PREFIX + "/" + pluginRef.getActiveVersion());
	}

	protected PluginRef getPluginRef() {
		return this.pluginRef;
	}

	protected void setTemplatePrefix(String templatePrefix) {
		this.templatePrefix = templatePrefix;
	}

	protected String getTemplatePrefix() {
		return this.templatePrefix;
	}

	protected void setTemplate(String template) {
		this.template = template;
	}

	public String getTemplate() {
		return getTemplatePrefix() + "/" + this.template;
	}

	/**
	 * Returns the AbstractArtifact used to build this OssjInterfaceModel
	 * 
	 * @return AbstractArtifact - the artifact used to build this model
	 */
	public AbstractArtifact getArtifact() {
		return this.artifact;
	}

	/**
	 * Populates this based on the context.
	 * 
	 * @param manager
	 * @param context
	 * @throws TigerstripeException
	 */
	protected void build(ArtifactManager manager) throws TigerstripeException {
		// TODO extract destination directory from context
		this.destinationDir = getPluginRef().getProject().getProjectDetails()
				.getOutputDirectory();

		// By default, let's set some the package/name and force to generate
		// This may be overwritten by descendant classes.
		setPackage(getDefaultPackage());
		setName(getDefaultName());
		setGenerate("true");

		// Read the tigerstripe.interface tag
		Tag intfTag = getArtifact().getFirstTagByName(INTERFACE_TAG);
		if (intfTag != null) {
			Properties prop = intfTag.getProperties();
			this.targetPackage = prop.getProperty("package",
					getDefaultPackage());
			this.targetName = prop.getProperty("name", getDefaultName());
			this.generate = prop.getProperty("generate", "true");
		}

	}

	protected String getDefaultPackage() {
		return getArtifact().getPackage();
	}

	protected String getDefaultName() {
		return getArtifact().getName();
	}

	public String getDestinationDir() {
		return this.destinationDir;
	}

	/**
	 * Returns the package for this interface model
	 * 
	 * @return String - The package for this interface model
	 */
	public String getPackage() {
		return this.targetPackage;
	}

	public void setPackage(String targetPackage) {
		this.targetPackage = targetPackage;
	}

	/**
	 * Returns the name for this interface model
	 * 
	 * @return String - The name for this interface model
	 */
	public String getName() {
		return this.targetName;
	}

	public void setName(String name) {
		this.targetName = name;
	}

	/**
	 * Returns the fully qualified name for this interface model
	 * 
	 * @return String - the fully qualified name for this interface model
	 */
	public String getFullyQualifiedName() {
		return getPackage() + "." + getName();
	}

	/**
	 * Returns true if this interface model should be generated
	 * 
	 * @return true - if this interface model should be generated, false
	 *         otherwise.
	 */
	public boolean getGenerate() {
		return "true".equals(this.generate) || "yes".equals(this.generate);
	}

	public void setGenerate(String generate) {
		this.generate = generate;
	}

	/**
	 * Returns the interface file path
	 * 
	 * @return String - the interface file path
	 */
	public String getInterfacePath() {
		return getDestinationDir() + File.separator
				+ this.targetPackage.replace('.', File.separator.charAt(0));
	}

	/**
	 * Returns the interface file extention path
	 * 
	 * @return String - the interface file extention path
	 */
	public String getInterfaceExtensionPath() {
		return this.targetPackage.replace('.', File.separator.charAt(0));
	}

	/**
	 * Returns the interface file name
	 * 
	 * @return String - the interface file name
	 */
	public String getInterfaceFilename() {
		return this.targetName + ".java";
	}
}
