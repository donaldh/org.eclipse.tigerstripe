/*******************************************************************************
 * Copyright (c) 2007 Cisco Systems, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    E. Dillon (Cisco Systems, Inc.) - reformat for Code Open-Sourcing
 *******************************************************************************/
package org.eclipse.tigerstripe.workbench.ui.visualeditor.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.tigerstripe.workbench.ui.visualeditor.util.VisualeditorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets. Note that most of the
 * adapters are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class VisualeditorItemProviderAdapterFactory extends
		VisualeditorAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public VisualeditorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NamedElement}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NamedElementItemProvider namedElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NamedElement}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNamedElementAdapter() {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.QualifiedNamedElement}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected QualifiedNamedElementItemProvider qualifiedNamedElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.QualifiedNamedElement}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createQualifiedNamedElementAdapter() {
		if (qualifiedNamedElementItemProvider == null) {
			qualifiedNamedElementItemProvider = new QualifiedNamedElementItemProvider(
					this);
		}

		return qualifiedNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AbstractArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AbstractArtifactItemProvider abstractArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AbstractArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAbstractArtifactAdapter() {
		if (abstractArtifactItemProvider == null) {
			abstractArtifactItemProvider = new AbstractArtifactItemProvider(
					this);
		}

		return abstractArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.ManagedEntityArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ManagedEntityArtifactItemProvider managedEntityArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.ManagedEntityArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createManagedEntityArtifactAdapter() {
		if (managedEntityArtifactItemProvider == null) {
			managedEntityArtifactItemProvider = new ManagedEntityArtifactItemProvider(
					this);
		}

		return managedEntityArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.DatatypeArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DatatypeArtifactItemProvider datatypeArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.DatatypeArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDatatypeArtifactAdapter() {
		if (datatypeArtifactItemProvider == null) {
			datatypeArtifactItemProvider = new DatatypeArtifactItemProvider(
					this);
		}

		return datatypeArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NotificationArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NotificationArtifactItemProvider notificationArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NotificationArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNotificationArtifactAdapter() {
		if (notificationArtifactItemProvider == null) {
			notificationArtifactItemProvider = new NotificationArtifactItemProvider(
					this);
		}

		return notificationArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NamedQueryArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NamedQueryArtifactItemProvider namedQueryArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.NamedQueryArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNamedQueryArtifactAdapter() {
		if (namedQueryArtifactItemProvider == null) {
			namedQueryArtifactItemProvider = new NamedQueryArtifactItemProvider(
					this);
		}

		return namedQueryArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Enumeration}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected EnumerationItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Enumeration}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createEnumerationAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new EnumerationItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.UpdateProcedureArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected UpdateProcedureArtifactItemProvider updateProcedureArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.UpdateProcedureArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createUpdateProcedureArtifactAdapter() {
		if (updateProcedureArtifactItemProvider == null) {
			updateProcedureArtifactItemProvider = new UpdateProcedureArtifactItemProvider(
					this);
		}

		return updateProcedureArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.ExceptionArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ExceptionArtifactItemProvider exceptionArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.ExceptionArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createExceptionArtifactAdapter() {
		if (exceptionArtifactItemProvider == null) {
			exceptionArtifactItemProvider = new ExceptionArtifactItemProvider(
					this);
		}

		return exceptionArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.SessionFacadeArtifact}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SessionFacadeArtifactItemProvider sessionFacadeArtifactItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.SessionFacadeArtifact}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSessionFacadeArtifactAdapter() {
		if (sessionFacadeArtifactItemProvider == null) {
			sessionFacadeArtifactItemProvider = new SessionFacadeArtifactItemProvider(
					this);
		}

		return sessionFacadeArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Association}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Association}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AssociationClass}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssociationClassItemProvider associationClassItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AssociationClass}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAssociationClassAdapter() {
		if (associationClassItemProvider == null) {
			associationClassItemProvider = new AssociationClassItemProvider(
					this);
		}

		return associationClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.TypedElement}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypedElementItemProvider typedElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.TypedElement}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypedElementAdapter() {
		if (typedElementItemProvider == null) {
			typedElementItemProvider = new TypedElementItemProvider(this);
		}

		return typedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Attribute}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Attribute}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Method}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Method}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Literal}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected LiteralItemProvider literalItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Literal}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createLiteralAdapter() {
		if (literalItemProvider == null) {
			literalItemProvider = new LiteralItemProvider(this);
		}

		return literalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Parameter}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Parameter}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Map} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MapItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Map}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMapAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MapItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Reference}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Reference}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Dependency}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.Dependency}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AssociationClassClass}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssociationClassClassItemProvider associationClassClassItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.AssociationClassClass}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAssociationClassClassAdapter() {
		if (associationClassClassItemProvider == null) {
			associationClassClassItemProvider = new AssociationClassClassItemProvider(
					this);
		}

		return associationClassClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.DiagramProperty}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DiagramPropertyItemProvider diagramPropertyItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.tigerstripe.workbench.ui.visualeditor.DiagramProperty}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDiagramPropertyAdapter() {
		if (diagramPropertyItemProvider == null) {
			diagramPropertyItemProvider = new DiagramPropertyItemProvider(this);
		}

		return diagramPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter)))
				return adapter;
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (namedElementItemProvider != null)
			namedElementItemProvider.dispose();
		if (qualifiedNamedElementItemProvider != null)
			qualifiedNamedElementItemProvider.dispose();
		if (abstractArtifactItemProvider != null)
			abstractArtifactItemProvider.dispose();
		if (managedEntityArtifactItemProvider != null)
			managedEntityArtifactItemProvider.dispose();
		if (datatypeArtifactItemProvider != null)
			datatypeArtifactItemProvider.dispose();
		if (notificationArtifactItemProvider != null)
			notificationArtifactItemProvider.dispose();
		if (namedQueryArtifactItemProvider != null)
			namedQueryArtifactItemProvider.dispose();
		if (enumerationItemProvider != null)
			enumerationItemProvider.dispose();
		if (updateProcedureArtifactItemProvider != null)
			updateProcedureArtifactItemProvider.dispose();
		if (exceptionArtifactItemProvider != null)
			exceptionArtifactItemProvider.dispose();
		if (sessionFacadeArtifactItemProvider != null)
			sessionFacadeArtifactItemProvider.dispose();
		if (associationItemProvider != null)
			associationItemProvider.dispose();
		if (associationClassItemProvider != null)
			associationClassItemProvider.dispose();
		if (typedElementItemProvider != null)
			typedElementItemProvider.dispose();
		if (attributeItemProvider != null)
			attributeItemProvider.dispose();
		if (methodItemProvider != null)
			methodItemProvider.dispose();
		if (literalItemProvider != null)
			literalItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (mapItemProvider != null)
			mapItemProvider.dispose();
		if (referenceItemProvider != null)
			referenceItemProvider.dispose();
		if (dependencyItemProvider != null)
			dependencyItemProvider.dispose();
		if (associationClassClassItemProvider != null)
			associationClassClassItemProvider.dispose();
		if (diagramPropertyItemProvider != null)
			diagramPropertyItemProvider.dispose();
	}

}
